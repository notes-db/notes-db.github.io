import {
  SearchQuery,
  findNext,
  findPrevious,
  getSearchQuery,
  search,
  searchKeymap,
  setSearchQuery
} from "./chunk-LSTBK4WX.js";
import {
  createRenderEffect,
  createRoot,
  createSignal,
  delegateEvents,
  getNextElement,
  runHydrationEvents,
  setAttribute,
  template,
  use
} from "./chunk-DVMAOLTX.js";
import {
  keymap,
  runScopeHandlers
} from "./chunk-JGHQ5UKI.js";
import "./chunk-M5CQCUKE.js";
import "./chunk-THBTSZW5.js";

// node_modules/ink-mde/dist/search-72d4d407.js
var N = template('<div class="ink-mde-search-panel"><input class="ink-mde-search-input" type="text"></div>', 3);
var w = () => [search({
  top: true,
  createPanel: (r) => createRoot((c) => {
    const [a, u] = createSignal(getSearchQuery(r.state));
    let n;
    const s = (e) => {
      if (runScopeHandlers(r, e, "search-panel"))
        return e.preventDefault();
      e.code === "Enter" && (e.preventDefault(), e.shiftKey ? findPrevious(r) : findNext(r));
    }, f = (e) => {
      const {
        value: t
      } = e.target;
      u(new SearchQuery({
        search: t
      })), r.dispatch({
        effects: setSearchQuery.of(a())
      });
    };
    return {
      destroy: () => {
        c();
      },
      dom: (() => {
        const e = getNextElement(N), t = e.firstChild;
        e.$$keydown = s;
        const o = n;
        return typeof o == "function" ? use(o, t) : n = t, t.$$keydown = s, t.$$input = f, setAttribute(t, "main-field", "true"), createRenderEffect(() => t.value = a().search), runHydrationEvents(), e;
      })(),
      mount: () => {
        n == null ? void 0 : n.focus();
      },
      top: true
    };
  })
}), keymap.of(searchKeymap)];
delegateEvents(["keydown", "input"]);
export {
  w as search
};
//# sourceMappingURL=search-72d4d407-TJG3XPO6.js.map
