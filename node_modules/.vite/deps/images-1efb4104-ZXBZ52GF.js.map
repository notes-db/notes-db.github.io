{
  "version": 3,
  "sources": ["../../ink-mde/src/vendor/extensions/images.ts"],
  "sourcesContent": ["import { syntaxTree } from '@codemirror/language'\nimport type { EditorState, Extension, Range } from '@codemirror/state'\nimport { RangeSet, StateField } from '@codemirror/state'\nimport type { DecorationSet } from '@codemirror/view'\nimport { Decoration, EditorView, WidgetType } from '@codemirror/view'\n\ninterface ImageWidgetParams {\n  url: string,\n}\n\nclass ImageWidget extends WidgetType {\n  readonly url\n\n  constructor({ url }: ImageWidgetParams) {\n    super()\n\n    this.url = url\n  }\n\n  eq(imageWidget: ImageWidget) {\n    return imageWidget.url === this.url\n  }\n\n  toDOM() {\n    const container = document.createElement('div')\n    const backdrop = container.appendChild(document.createElement('div'))\n    const figure = backdrop.appendChild(document.createElement('figure'))\n    const image = figure.appendChild(document.createElement('img'))\n\n    container.setAttribute('aria-hidden', 'true')\n    container.className = 'cm-image-container'\n    backdrop.className = 'cm-image-backdrop'\n    figure.className = 'cm-image-figure'\n    image.className = 'cm-image-img'\n    image.src = this.url\n\n    container.style.paddingBottom = '0.5rem'\n    container.style.paddingTop = '0.5rem'\n\n    backdrop.classList.add('cm-image-backdrop')\n\n    backdrop.style.borderRadius = 'var(--ink-internal-border-radius)'\n    backdrop.style.display = 'flex'\n    backdrop.style.alignItems = 'center'\n    backdrop.style.justifyContent = 'center'\n    backdrop.style.overflow = 'hidden'\n    backdrop.style.maxWidth = '100%'\n\n    figure.style.margin = '0'\n\n    image.style.display = 'block'\n    image.style.maxHeight = 'var(--ink-internal-block-max-height)'\n    image.style.maxWidth = '100%'\n    image.style.width = '100%'\n\n    return container\n  }\n}\n\nexport const images = (): Extension => {\n  const imageRegex = /!\\[.*?\\]\\((?<url>.*?)\\)/\n\n  const imageDecoration = (imageWidgetParams: ImageWidgetParams) => Decoration.widget({\n    widget: new ImageWidget(imageWidgetParams),\n    side: -1,\n    block: true,\n  })\n\n  const decorate = (state: EditorState) => {\n    const widgets: Range<Decoration>[] = []\n\n    syntaxTree(state).iterate({\n      enter: ({ type, from, to }) => {\n        if (type.name === 'Image') {\n          const result = imageRegex.exec(state.doc.sliceString(from, to))\n\n          if (result && result.groups && result.groups.url)\n            widgets.push(imageDecoration({ url: result.groups.url }).range(state.doc.lineAt(from).from))\n        }\n      },\n    })\n\n    return widgets.length > 0 ? RangeSet.of(widgets) : Decoration.none\n  }\n\n  const imagesField = StateField.define<DecorationSet>({\n    create(state) {\n      return decorate(state)\n    },\n    update(images, transaction) {\n      if (transaction.docChanged)\n        return decorate(transaction.state)\n\n      return images.map(transaction.changes)\n    },\n    provide(field) {\n      return EditorView.decorations.from(field)\n    },\n  })\n\n  return [\n    imagesField,\n  ]\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;AAUA,IAAMA,IAAN,cAA0BC,WAAW;EAGnC,YAAY,EAAE,KAAAC,EAAAA,GAA0B;AAChC,UAAA;AAHC;AAKP,SAAK,MAAMA;EACb;EAEA,GAAGC,GAA0B;AACpB,WAAAA,EAAY,QAAQ,KAAK;EAClC;EAEA,QAAQ;AACA,UAAAC,IAAY,SAAS,cAAc,KAAK,GACxCC,IAAWD,EAAU,YAAY,SAAS,cAAc,KAAK,CAAC,GAC9DE,IAASD,EAAS,YAAY,SAAS,cAAc,QAAQ,CAAC,GAC9DE,IAAQD,EAAO,YAAY,SAAS,cAAc,KAAK,CAAC;AAEpD,WAAAF,EAAA,aAAa,eAAe,MAAM,GAC5CA,EAAU,YAAY,sBACtBC,EAAS,YAAY,qBACrBC,EAAO,YAAY,mBACnBC,EAAM,YAAY,gBAClBA,EAAM,MAAM,KAAK,KAEjBH,EAAU,MAAM,gBAAgB,UAChCA,EAAU,MAAM,aAAa,UAEpBC,EAAA,UAAU,IAAI,mBAAmB,GAE1CA,EAAS,MAAM,eAAe,qCAC9BA,EAAS,MAAM,UAAU,QACzBA,EAAS,MAAM,aAAa,UAC5BA,EAAS,MAAM,iBAAiB,UAChCA,EAAS,MAAM,WAAW,UAC1BA,EAAS,MAAM,WAAW,QAE1BC,EAAO,MAAM,SAAS,KAEtBC,EAAM,MAAM,UAAU,SACtBA,EAAM,MAAM,YAAY,wCACxBA,EAAM,MAAM,WAAW,QACvBA,EAAM,MAAM,QAAQ,QAEbH;EACT;AACF;AAEO,IAAMI,IAAS,MAAiB;AACrC,QAAMC,IAAa,2BAEbC,IAAkB,CAACC,MAAyCC,WAAW,OAAO;IAClF,QAAQ,IAAIZ,EAAYW,CAAiB;IACzC,MAAM;IACN,OAAO;EAAA,CACR,GAEKE,IAAW,CAACC,MAAuB;AACvC,UAAMC,IAA+B,CAAA;AAE1B,WAAAC,WAAAF,CAAK,EAAE,QAAQ;MACxB,OAAO,CAAC,EAAE,MAAAG,GAAM,MAAAC,GAAM,IAAAC,EAAAA,MAAS;AACzB,YAAAF,EAAK,SAAS,SAAS;AACnB,gBAAAG,IAASX,EAAW,KAAKK,EAAM,IAAI,YAAYI,GAAMC,CAAE,CAAC;AAE1DC,eAAUA,EAAO,UAAUA,EAAO,OAAO,OAC3CL,EAAQ,KAAKL,EAAgB,EAAE,KAAKU,EAAO,OAAO,IAAI,CAAC,EAAE,MAAMN,EAAM,IAAI,OAAOI,CAAI,EAAE,IAAI,CAAC;QAC/F;MACF;IAAA,CACD,GAEMH,EAAQ,SAAS,IAAIM,SAAS,GAAGN,CAAO,IAAIH,WAAW;EAAA;AAkBzD,SAAA;IAfaU,WAAW,OAAsB;MACnD,OAAOR,GAAO;AACZ,eAAOD,EAASC,CAAK;MACvB;MACA,OAAON,GAAQe,GAAa;AAC1B,eAAIA,EAAY,aACPV,EAASU,EAAY,KAAK,IAE5Bf,EAAO,IAAIe,EAAY,OAAO;MACvC;MACA,QAAQC,GAAO;AACN,eAAAC,WAAW,YAAY,KAAKD,CAAK;MAC1C;IAAA,CACD;EAGC;AAEJ;",
  "names": ["ImageWidget", "WidgetType", "url", "imageWidget", "container", "backdrop", "figure", "image", "images", "imageRegex", "imageDecoration", "imageWidgetParams", "Decoration", "decorate", "state", "widgets", "syntaxTree", "type", "from", "to", "result", "RangeSet", "StateField", "transaction", "field", "EditorView"]
}
