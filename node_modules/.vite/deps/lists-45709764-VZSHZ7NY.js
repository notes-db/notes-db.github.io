import {
  syntaxTree
} from "./chunk-5OMH3UOP.js";
import {
  Decoration,
  EditorView,
  ViewPlugin
} from "./chunk-JGHQ5UKI.js";
import {
  RangeSet,
  StateField
} from "./chunk-M5CQCUKE.js";
import "./chunk-THBTSZW5.js";

// node_modules/ink-mde/dist/lists-45709764.js
var M = () => ({
  compare: (t) => false,
  destroy: () => {
  },
  eq: (t) => false,
  estimatedHeight: -1,
  ignoreEvent: () => true,
  toDOM: () => {
    const t = document.createElement("span");
    return t.innerHTML = "&#x2022;", t.setAttribute("aria-hidden", "true"), t;
  },
  updateDOM: () => false
});
var x = (t) => ({
  compare: (e) => e.isChecked === t,
  destroy: () => {
  },
  eq: (e) => e.isChecked === t,
  estimatedHeight: -1,
  ignoreEvent: () => false,
  isChecked: t,
  toDOM: () => {
    const e = document.createElement("input");
    return e.setAttribute("aria-hidden", "true"), e.className = "ink-mde-task-toggle", e.type = "checkbox", e.checked = t, e;
  },
  updateDOM: () => false
});
var O = (t, e, s, o) => Math.max(t, s) <= Math.min(e, o);
var l = (t, e, s) => t.selection.ranges.some((o) => O(e, s, o.from, o.to));
var w = (t, e) => {
  const s = t.state.sliceDoc(e + 2, e + 5);
  return t.dispatch({
    changes: {
      from: e + 2,
      to: e + 5,
      insert: s === "[ ]" ? "[x]" : "[ ]"
    }
  }), true;
};
var v = () => {
  const t = () => Decoration.replace({
    widget: M()
  }), e = (r) => Decoration.replace({
    widget: x(r)
  }), s = (r) => {
    const n = [];
    return syntaxTree(r).iterate({
      enter: ({ type: c, from: i, to: a }) => {
        if (c.name === "ListMark" && !l(r, i, a)) {
          const u = r.sliceDoc(a + 1, a + 4);
          if (!["[ ]", "[x]"].includes(u)) {
            const m = r.sliceDoc(i, a);
            ["-", "*"].includes(m) && n.push(t().range(i, a));
          }
        }
        if (c.name === "TaskMarker" && !l(r, i - 2, a)) {
          const u = r.sliceDoc(i, a);
          n.push(e(u === "[x]").range(i - 2, a));
        }
      }
    }), n.length > 0 ? RangeSet.of(n) : Decoration.none;
  }, o = ViewPlugin.define(() => ({}), {
    eventHandlers: {
      mousedown: (r, n) => {
        const c = r.target;
        if ((c == null ? void 0 : c.nodeName) === "INPUT" && c.classList.contains("ink-mde-task-toggle"))
          return w(n, n.posAtDOM(c));
      }
    }
  }), g = StateField.define({
    create(r) {
      return s(r);
    },
    update(r, { state: n }) {
      return s(n);
    },
    provide(r) {
      return EditorView.decorations.from(r);
    }
  });
  return [
    o,
    g
  ];
};
export {
  v as lists
};
//# sourceMappingURL=lists-45709764-VZSHZ7NY.js.map
