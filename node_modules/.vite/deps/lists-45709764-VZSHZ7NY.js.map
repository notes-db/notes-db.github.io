{
  "version": 3,
  "sources": ["../../ink-mde/src/vendor/extensions/lists.ts"],
  "sourcesContent": ["import { syntaxTree } from '@codemirror/language'\nimport { RangeSet, StateField } from '@codemirror/state'\nimport { Decoration, EditorView, ViewPlugin } from '@codemirror/view'\nimport type { EditorState, Extension, Range } from '@codemirror/state'\nimport type { DecorationSet, WidgetType } from '@codemirror/view'\n\ninterface Widget extends WidgetType {\n  compare: (widget: Widget) => boolean,\n  isChecked?: boolean,\n}\n\nconst dotWidget = (): Widget => {\n  return {\n    compare: (_other: Widget) => {\n      return false\n    },\n    destroy: () => {},\n    eq: (_other: Widget) => {\n      return false\n    },\n    estimatedHeight: -1,\n    ignoreEvent: () => true,\n    toDOM: () => {\n      const span = document.createElement('span')\n\n      span.innerHTML = '&#x2022;'\n      span.setAttribute('aria-hidden', 'true')\n\n      return span\n    },\n    updateDOM: () => false,\n  }\n}\n\nconst taskWidget = (isChecked: boolean): Widget => {\n  return {\n    compare: (other: Widget) => {\n      return other.isChecked === isChecked\n    },\n    destroy: () => {},\n    eq: (other: Widget) => {\n      return other.isChecked === isChecked\n    },\n    estimatedHeight: -1,\n    ignoreEvent: () => false,\n    isChecked,\n    toDOM: () => {\n      const input = document.createElement('input')\n\n      input.setAttribute('aria-hidden', 'true')\n      input.className = 'ink-mde-task-toggle'\n      input.type = 'checkbox'\n      input.checked = isChecked\n\n      return input\n    },\n    updateDOM: () => false,\n  }\n}\n\nconst hasOverlap = (x1: number, x2: number, y1: number, y2: number) => {\n  return Math.max(x1, y1) <= Math.min(x2, y2)\n}\n\nconst isCursorInRange = (state: EditorState, from: number, to: number) => {\n  return state.selection.ranges.some((range) => {\n    return hasOverlap(from, to, range.from, range.to)\n  })\n}\n\nconst toggleTask = (view: EditorView, position: number) => {\n  const before = view.state.sliceDoc(position + 2, position + 5)\n\n  view.dispatch({\n    changes: {\n      from: position + 2,\n      to: position + 5,\n      insert: before === '[ ]' ? '[x]' : '[ ]',\n    },\n  })\n\n  return true\n}\n\nexport const lists = (): Extension => {\n  const dotDecoration = () => Decoration.replace({\n    widget: dotWidget(),\n  })\n\n  const taskDecoration = (isChecked: boolean) => Decoration.replace({\n    widget: taskWidget(isChecked),\n  })\n\n  const decorate = (state: EditorState) => {\n    const widgets: Range<Decoration>[] = []\n\n    syntaxTree(state).iterate({\n      enter: ({ type, from, to }) => {\n        if (type.name === 'ListMark' && !isCursorInRange(state, from, to)) {\n          const task = state.sliceDoc(to + 1, to + 4)\n\n          if (!['[ ]', '[x]'].includes(task)) {\n            const marker = state.sliceDoc(from, to)\n\n            if (['-', '*'].includes(marker)) {\n              widgets.push(dotDecoration().range(from, to))\n            }\n          }\n        }\n\n        if (type.name === 'TaskMarker' && !isCursorInRange(state, from - 2, to)) {\n          const task = state.sliceDoc(from, to)\n\n          widgets.push(taskDecoration(task === '[x]').range(from - 2, to))\n        }\n      },\n    })\n\n    return widgets.length > 0 ? RangeSet.of(widgets) : Decoration.none\n  }\n\n  const viewPlugin = ViewPlugin.define(() => ({}), {\n    eventHandlers: {\n      mousedown: (event, view) => {\n        const target = event.target as HTMLElement\n\n        if (target?.nodeName === 'INPUT' && target.classList.contains('ink-mde-task-toggle')) {\n          return toggleTask(view, view.posAtDOM(target))\n        }\n      },\n    },\n  })\n  const stateField = StateField.define<DecorationSet>({\n    create(state) {\n      return decorate(state)\n    },\n    update(_references, { state }) {\n      return decorate(state)\n    },\n    provide(field) {\n      return EditorView.decorations.from(field)\n    },\n  })\n\n  return [\n    viewPlugin,\n    stateField,\n  ]\n}\n"],
  "mappings": "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",
  "names": ["dotWidget", "_other", "span", "taskWidget", "isChecked", "other", "input", "hasOverlap", "x1", "x2", "y1", "y2", "isCursorInRange", "state", "from", "to", "range", "toggleTask", "view", "position", "before", "lists", "dotDecoration", "Decoration", "taskDecoration", "decorate", "widgets", "syntaxTree", "type", "task", "marker", "RangeSet", "viewPlugin", "ViewPlugin", "event", "target", "stateField", "StateField", "_references", "field", "EditorView"]
}
