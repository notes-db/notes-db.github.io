import { sharedConfig as M, createRoot as Be, createRenderEffect as z, createSignal as D, onMount as me, onCleanup as Ne, createComponent as f, For as De, Show as x, createEffect as Ee, createContext as Te, useContext as He } from "solid-js";
import { EditorView as b, Decoration as C, WidgetType as he, ViewPlugin as je, keymap as ze } from "@codemirror/view";
import { closeBrackets as Ve, autocompletion as Oe } from "@codemirror/autocomplete";
import { StateField as Z, RangeSet as W, Compartment as Ie, EditorState as Q, EditorSelection as Re, SelectionRange as We, RangeSetBuilder as Fe, Transaction as Pe } from "@codemirror/state";
import { vim as Ue } from "@replit/codemirror-vim";
import { syntaxTree as J, syntaxHighlighting as qe, HighlightStyle as Xe } from "@codemirror/language";
import { defaultKeymap as Qe, historyKeymap as Ge, indentMore as Ke, indentLess as Ze, history as Je } from "@codemirror/commands";
import { markdown as Ye, markdownLanguage as et } from "@codemirror/lang-markdown";
import { languages as tt } from "@codemirror/language-data";
import { tags as d } from "@lezer/highlight";
function nt(e, n, t) {
  let o = t.length, r = n.length, a = o, l = 0, i = 0, s = n[r - 1].nextSibling, c = null;
  for (; l < r || i < a; ) {
    if (n[l] === t[i]) {
      l++, i++;
      continue;
    }
    for (; n[r - 1] === t[a - 1]; )
      r--, a--;
    if (r === l) {
      const u = a < o ? i ? t[i - 1].nextSibling : t[a - i] : s;
      for (; i < a; )
        e.insertBefore(t[i++], u);
    } else if (a === i)
      for (; l < r; )
        (!c || !c.has(n[l])) && n[l].remove(), l++;
    else if (n[l] === t[a - 1] && t[i] === n[r - 1]) {
      const u = n[--r].nextSibling;
      e.insertBefore(t[i++], n[l++].nextSibling), e.insertBefore(t[--a], u), n[r] = t[a];
    } else {
      if (!c) {
        c = /* @__PURE__ */ new Map();
        let k = i;
        for (; k < a; )
          c.set(t[k], k++);
      }
      const u = c.get(n[l]);
      if (u != null)
        if (i < u && u < a) {
          let k = l, L = 1, H;
          for (; ++k < r && k < a && !((H = c.get(n[k])) == null || H !== u + L); )
            L++;
          if (L > u - i) {
            const I = n[l];
            for (; i < u; )
              e.insertBefore(t[i++], I);
          } else
            e.replaceChild(t[i++], n[l++]);
        } else
          l++;
      else
        n[l++].remove();
    }
  }
}
const le = "_$DX_DELEGATE";
function ot(e, n, t) {
  let o;
  return Be((r) => {
    o = r, n === document ? e() : p(n, e(), n.firstChild ? null : void 0, t);
  }), () => {
    o(), n.textContent = "";
  };
}
function h(e, n, t) {
  const o = document.createElement("template");
  o.innerHTML = e;
  let r = o.content.firstChild;
  return t && (r = r.firstChild), r;
}
function ke(e, n = window.document) {
  const t = n[le] || (n[le] = /* @__PURE__ */ new Set());
  for (let o = 0, r = e.length; o < r; o++) {
    const a = e[o];
    t.has(a) || (t.add(a), n.addEventListener(a, rt));
  }
}
function se(e, n, t) {
  t == null ? e.removeAttribute(n) : e.setAttribute(n, t);
}
function p(e, n, t, o) {
  if (t !== void 0 && !o && (o = []), typeof n != "function")
    return F(e, n, o, t);
  z((r) => F(e, n(), r, t), o);
}
function rt(e) {
  const n = `$$${e.type}`;
  let t = e.composedPath && e.composedPath()[0] || e.target;
  for (e.target !== t && Object.defineProperty(e, "target", {
    configurable: !0,
    value: t
  }), Object.defineProperty(e, "currentTarget", {
    configurable: !0,
    get() {
      return t || document;
    }
  }), M.registry && !M.done && (M.done = !0, document.querySelectorAll("[id^=pl-]").forEach((o) => o.remove())); t !== null; ) {
    const o = t[n];
    if (o && !t.disabled) {
      const r = t[`${n}Data`];
      if (r !== void 0 ? o.call(t, r, e) : o.call(t, e), e.cancelBubble)
        return;
    }
    t = t.host && t.host !== t && t.host instanceof Node ? t.host : t.parentNode;
  }
}
function F(e, n, t, o, r) {
  for (M.context && !t && (t = [...e.childNodes]); typeof t == "function"; )
    t = t();
  if (n === t)
    return t;
  const a = typeof n, l = o !== void 0;
  if (e = l && t[0] && t[0].parentNode || e, a === "string" || a === "number") {
    if (M.context)
      return t;
    if (a === "number" && (n = n.toString()), l) {
      let i = t[0];
      i && i.nodeType === 3 ? i.data = n : i = document.createTextNode(n), t = B(e, t, o, i);
    } else
      t !== "" && typeof t == "string" ? t = e.firstChild.data = n : t = e.textContent = n;
  } else if (n == null || a === "boolean") {
    if (M.context)
      return t;
    t = B(e, t, o);
  } else {
    if (a === "function")
      return z(() => {
        let i = n();
        for (; typeof i == "function"; )
          i = i();
        t = F(e, i, t, o);
      }), () => t;
    if (Array.isArray(n)) {
      const i = [], s = t && Array.isArray(t);
      if (G(i, n, t, r))
        return z(() => t = F(e, i, t, o, !0)), () => t;
      if (M.context) {
        for (let c = 0; c < i.length; c++)
          if (i[c].parentNode)
            return t = i;
      }
      if (i.length === 0) {
        if (t = B(e, t, o), l)
          return t;
      } else
        s ? t.length === 0 ? ce(e, i, o) : nt(e, t, i) : (t && B(e), ce(e, i));
      t = i;
    } else if (n instanceof Node) {
      if (M.context && n.parentNode)
        return t = l ? [n] : n;
      if (Array.isArray(t)) {
        if (l)
          return t = B(e, t, o, n);
        B(e, t, null, n);
      } else
        t == null || t === "" || !e.firstChild ? e.appendChild(n) : e.replaceChild(n, e.firstChild);
      t = n;
    }
  }
  return t;
}
function G(e, n, t, o) {
  let r = !1;
  for (let a = 0, l = n.length; a < l; a++) {
    let i = n[a], s = t && t[a];
    if (i instanceof Node)
      e.push(i);
    else if (!(i == null || i === !0 || i === !1))
      if (Array.isArray(i))
        r = G(e, i, s) || r;
      else if (typeof i == "function")
        if (o) {
          for (; typeof i == "function"; )
            i = i();
          r = G(e, Array.isArray(i) ? i : [i], s) || r;
        } else
          e.push(i), r = !0;
      else {
        const c = String(i);
        s && s.nodeType === 3 && s.data === c ? e.push(s) : e.push(document.createTextNode(c));
      }
  }
  return r;
}
function ce(e, n, t) {
  for (let o = 0, r = n.length; o < r; o++)
    e.insertBefore(n[o], t);
}
function B(e, n, t, o) {
  if (t === void 0)
    return e.textContent = "";
  const r = o || document.createTextNode("");
  if (n.length) {
    let a = !1;
    for (let l = n.length - 1; l >= 0; l--) {
      const i = n[l];
      if (r !== i) {
        const s = i.parentNode === e;
        !a && !l ? s ? e.replaceChild(r, i) : e.insertBefore(r, t) : s && i.remove();
      } else
        a = !0;
    }
  } else
    e.insertBefore(r, t);
  return [r];
}
const _ = {
  array: "[object Array]",
  object: "[object Object]",
  string: "[object String]",
  undefined: "[object Undefined]",
  window: "[object Window]"
}, it = (e) => {
  if (Object.prototype.toString.call(e) === _.object)
    return `[object ${e.constructor.name}]`;
}, N = (e, n) => it(e) === n, at = (e, n) => {
  const t = /* @__PURE__ */ new WeakMap(), o = (r, a) => t.get(r) || (N(r, _.object) && t.set(r, !0), N(a, _.undefined)) ? r : N(r, _.array) && N(a, _.array) ? [...a] : N(r, _.object) && N(a, _.object) ? Object.keys(r).reduce((l, i) => (Object.hasOwn(a, i) ? l[i] = o(r[i], a[i]) : l[i] = r[i], l), {}) : a;
  return o(e, n);
}, V = (e, n) => at(e, n);
var E = /* @__PURE__ */ ((e) => (e.Auto = "auto", e.Dark = "dark", e.Light = "light", e))(E || {}), $ = /* @__PURE__ */ ((e) => (e.Appearance = "appearance", e.Attribution = "attribution", e.Autocomplete = "autocomplete", e.Images = "images", e.ReadOnly = "readonly", e.Spellcheck = "spellcheck", e.Vim = "vim", e))($ || {}), m = /* @__PURE__ */ ((e) => (e.Bold = "bold", e.Code = "code", e.CodeBlock = "code_block", e.Heading = "heading", e.Image = "image", e.Italic = "italic", e.Link = "link", e.List = "list", e.OrderedList = "ordered_list", e.Quote = "quote", e.TaskList = "task_list", e))(m || {}), R = /* @__PURE__ */ ((e) => (e.Completion = "completion", e.Default = "default", e.Grammar = "grammar", e))(R || {});
const de = () => document.createElement("div"), xe = () => window.matchMedia("(prefers-color-scheme: dark)").matches, lt = (e) => e === E.Dark ? !0 : e === E.Light ? !1 : xe(), X = (e) => {
  const n = [
    { suffix: "border-radius", default: "0.25rem" },
    { suffix: "color", default: "currentColor" },
    { suffix: "flex-direction", default: "column" },
    { suffix: "font-family", default: "inherit" },
    { suffix: "block-background-color", default: "#121212", light: "#f5f5f5" },
    { suffix: "block-background-color-on-hover", default: "#0f0f0f", light: "#e0e0e0" },
    { suffix: "block-max-height", default: "20rem" },
    { suffix: "block-padding", default: "0.5rem" },
    { suffix: "code-background-color", default: "var(--ink-internal-block-background-color)" },
    { suffix: "code-color", default: "inherit" },
    { suffix: "code-font-family", default: "'Monaco', Courier, monospace" },
    { suffix: "editor-font-size", default: "1em" },
    { suffix: "editor-line-height", default: "2em" },
    { suffix: "editor-padding", default: "0.5rem" },
    { suffix: "inline-padding", default: "0.125rem" },
    { suffix: "modal-position", default: "fixed" },
    { suffix: "syntax-atom-color", default: "#d19a66" },
    { suffix: "syntax-comment-color", default: "#abb2bf" },
    { suffix: "syntax-comment-font-style", default: "italic" },
    { suffix: "syntax-emphasis-color", default: "inherit" },
    { suffix: "syntax-emphasis-font-style", default: "italic" },
    { suffix: "syntax-hashtag-background-color", default: "#222", light: "#eee" },
    { suffix: "syntax-hashtag-color", default: "inherit" },
    { suffix: "syntax-heading-color", default: "inherit" },
    { suffix: "syntax-heading-font-weight", default: "600" },
    { suffix: "syntax-heading1-color", default: "var(--ink-internal-syntax-heading-color, inherit)" },
    { suffix: "syntax-heading1-font-size", default: "1.6em" },
    { suffix: "syntax-heading1-font-weight", default: "600" },
    { suffix: "syntax-heading2-color", default: "var(--ink-internal-syntax-heading-color, inherit)" },
    { suffix: "syntax-heading2-font-size", default: "1.5em" },
    { suffix: "syntax-heading2-font-weight", default: "600" },
    { suffix: "syntax-heading3-color", default: "var(--ink-internal-syntax-heading-color, inherit)" },
    { suffix: "syntax-heading3-font-size", default: "1.4em" },
    { suffix: "syntax-heading3-font-weight", default: "600" },
    { suffix: "syntax-heading4-color", default: "var(--ink-internal-syntax-heading-color, inherit)" },
    { suffix: "syntax-heading4-font-size", default: "1.3em" },
    { suffix: "syntax-heading4-font-weight", default: "600" },
    { suffix: "syntax-heading5-color", default: "var(--ink-internal-syntax-heading-color, inherit)" },
    { suffix: "syntax-heading5-font-size", default: "1.2em" },
    { suffix: "syntax-heading5-font-weight", default: "600" },
    { suffix: "syntax-heading6-color", default: "var(--ink-internal-syntax-heading-color, inherit)" },
    { suffix: "syntax-heading6-font-size", default: "1.1em" },
    { suffix: "syntax-heading6-font-weight", default: "600" },
    { suffix: "syntax-highlight-background-color", default: "#555555" },
    { suffix: "syntax-keyword-color", default: "#c678dd" },
    { suffix: "syntax-link-color", default: "inherit" },
    { suffix: "syntax-meta-color", default: "#abb2bf" },
    { suffix: "syntax-monospace-color", default: "var(--ink-internal-code-color)" },
    { suffix: "syntax-monospace-font-family", default: "var(--ink-internal-code-font-family)" },
    { suffix: "syntax-name-color", default: "#d19a66" },
    { suffix: "syntax-name-label-color", default: "#abb2bf" },
    { suffix: "syntax-name-property-color", default: "#96c0d8" },
    { suffix: "syntax-name-property-definition-color", default: "#e06c75" },
    { suffix: "syntax-name-variable-color", default: "#e06c75" },
    { suffix: "syntax-name-variable-definition-color", default: "#e5c07b" },
    { suffix: "syntax-name-variable-local-color", default: "#d19a66" },
    { suffix: "syntax-name-variable-special-color", default: "inherit" },
    { suffix: "syntax-number-color", default: "#d19a66" },
    { suffix: "syntax-operator-color", default: "#96c0d8" },
    { suffix: "syntax-processing-instruction-color", default: "#444444", light: "#bbbbbb" },
    { suffix: "syntax-punctuation-color", default: "#abb2bf" },
    { suffix: "syntax-strikethrough-color", default: "inherit" },
    { suffix: "syntax-strikethrough-text-decoration", default: "line-through" },
    { suffix: "syntax-string-color", default: "#98c379" },
    { suffix: "syntax-string-special-color", default: "inherit" },
    { suffix: "syntax-strong-color", default: "inherit" },
    { suffix: "syntax-strong-font-weight", default: "600" },
    { suffix: "syntax-url-color", default: "#aaaaaa", light: "#666666" }
  ], t = !lt(e.options.interface.appearance);
  return n.map((o) => {
    const r = t && o.light ? o.light : o.default;
    return `--ink-internal-${o.suffix}: var(--ink-${o.suffix}, ${r});`;
  });
}, fe = () => [
  b.theme({}, { dark: !0 })
], ue = () => [
  b.theme({}, { dark: !1 })
];
class st extends he {
  constructor() {
    super();
  }
  eq() {
    return !0;
  }
  toDOM() {
    const n = document.createElement("div"), t = n.appendChild(document.createElement("span")), o = n.appendChild(document.createElement("a"));
    return n.setAttribute("aria-hidden", "true"), n.style.bottom = "0", n.style.fontSize = "0.75em", n.style.opacity = "0.5", n.style.position = "absolute", n.style.right = "0", t.innerText = "powered by ", o.href = "https://github.com/voracious/ink-mde", o.innerText = "ink-mde", o.rel = "noopener noreferrer", o.target = "_blank", o.style.color = "var(--ink-internal-color)", o.style.fontWeight = "600", o.style.textDecoration = "none", n;
  }
}
const ct = b.baseTheme({
  ".cm-content": {
    paddingBottom: "2em"
  }
}), dt = Z.define({
  create(e) {
    return W.of(ge().range(e.doc.length));
  },
  update(e, n) {
    return W.of(ge().range(n.newDoc.length));
  },
  provide(e) {
    return b.decorations.from(e);
  }
}), ge = () => C.widget({
  widget: new st(),
  side: 1,
  block: !0
}), ft = () => [
  ct,
  dt
];
class ut extends he {
  url;
  constructor({ url: n }) {
    super(), this.url = n;
  }
  eq(n) {
    return n.url === this.url;
  }
  toDOM() {
    const n = document.createElement("div"), t = n.appendChild(document.createElement("div")), o = t.appendChild(document.createElement("figure")), r = o.appendChild(document.createElement("img"));
    return n.setAttribute("aria-hidden", "true"), n.className = "cm-image-container", t.className = "cm-image-backdrop", o.className = "cm-image-figure", r.className = "cm-image-img", r.src = this.url, n.style.paddingBottom = "0.5rem", n.style.paddingTop = "0.5rem", t.classList.add("cm-image-backdrop"), t.style.borderRadius = "var(--ink-internal-border-radius)", t.style.display = "flex", t.style.alignItems = "center", t.style.justifyContent = "center", t.style.overflow = "hidden", t.style.maxWidth = "100%", o.style.margin = "0", r.style.display = "block", r.style.maxHeight = "var(--ink-internal-block-max-height)", r.style.maxWidth = "100%", r.style.width = "100%", n;
  }
}
const gt = () => {
  const e = /!\[.*?\]\((?<url>.*?)\)/, n = (a) => C.widget({
    widget: new ut(a),
    side: -1,
    block: !0
  }), t = (a) => {
    const l = [];
    return J(a).iterate({
      enter: ({ type: i, from: s, to: c }) => {
        if (i.name === "Image") {
          const u = e.exec(a.doc.sliceString(s, c));
          u && u.groups && u.groups.url && l.push(n({ url: u.groups.url }).range(a.doc.lineAt(s).from));
        }
      }
    }), l.length > 0 ? W.of(l) : C.none;
  }, o = b.baseTheme({
    ".cm-image-backdrop": {
      backgroundColor: "var(--ink-internal-block-background-color)"
    }
  }), r = Z.define({
    create(a) {
      return t(a);
    },
    update(a, l) {
      return l.docChanged ? t(l.state) : a.map(l.changes);
    },
    provide(a) {
      return b.decorations.from(a);
    }
  });
  return [
    o,
    r
  ];
}, pt = () => b.contentAttributes.of({
  spellcheck: "true"
}), mt = (e, n) => {
  const t = e.resolver(n);
  return e.compartment.of(t);
}, ht = (e) => e.extensions.map((n) => mt(n, e.options)), kt = (e, n) => {
  const t = e.resolver(n);
  return e.compartment.reconfigure(t);
}, be = (e) => e.extensions.map((n) => kt(n, e.options)), S = (e) => {
  const n = new Ie(), t = bt[e];
  return {
    compartment: n,
    name: e,
    resolver: t
  };
}, xt = () => [
  S($.Appearance),
  S($.Attribution),
  S($.Autocomplete),
  S($.Images),
  S($.ReadOnly),
  S($.Spellcheck),
  S($.Vim)
], bt = {
  appearance({ interface: { appearance: e } }) {
    return e === E.Dark ? fe() : e === E.Light ? ue() : xe() ? fe() : ue();
  },
  attribution(e) {
    return e.interface.attribution ? ft() : [];
  },
  autocomplete(e) {
    return e.interface.autocomplete ? Ve() : [];
  },
  images(e) {
    return e.interface.images ? gt() : [];
  },
  readonly(e) {
    return e.interface.readonly ? Q.readOnly.of(!0) : Q.readOnly.of(!1);
  },
  spellcheck(e) {
    return e.interface.spellcheck ? pt() : [];
  },
  vim(e) {
    return e.vim ? Ue() : [];
  }
}, ve = () => ({
  editor: new b(),
  extensions: xt(),
  options: {
    doc: "",
    files: {
      clipboard: !1,
      dragAndDrop: !1,
      handler: () => {
      },
      injectMarkup: !0,
      types: ["image/*"]
    },
    hooks: {
      afterUpdate: () => {
      },
      beforeUpdate: () => {
      }
    },
    interface: {
      appearance: E.Auto,
      attribution: !0,
      autocomplete: !1,
      images: !1,
      readonly: !1,
      spellcheck: !0,
      toolbar: !1
    },
    plugins: [],
    selections: [],
    toolbar: {
      bold: !0,
      code: !0,
      codeBlock: !0,
      heading: !0,
      image: !0,
      italic: !0,
      link: !0,
      list: !0,
      orderedList: !0,
      quote: !0,
      taskList: !0,
      upload: !1
    },
    vim: !1
  },
  root: de(),
  target: de()
}), vt = (e) => V(ve(), e), yt = (e) => {
  const [n, t] = D(vt({ options: e }));
  return [n, t];
}, ye = (e) => {
  const n = e.map((t) => We.fromJSON({ anchor: t.start, head: t.end }));
  return Re.create(n);
}, wt = (e) => e.ranges.map((t) => ({
  end: t.anchor < t.head ? t.head : t.anchor,
  start: t.head < t.anchor ? t.head : t.anchor
})), w = (e) => ({ ...{
  block: !1,
  line: !1,
  multiline: !1,
  nodes: [],
  prefix: "",
  prefixStates: [],
  suffix: ""
}, ...e }), Ct = {
  [m.Bold]: w({
    nodes: ["StrongEmphasis"],
    prefix: "**",
    suffix: "**"
  }),
  [m.Code]: w({
    nodes: ["InlineCode"],
    prefix: "`",
    suffix: "`"
  }),
  [m.CodeBlock]: w({
    block: !0,
    nodes: ["FencedCode"],
    prefix: "```\n",
    suffix: "\n```"
  }),
  [m.Heading]: w({
    multiline: !0,
    nodes: ["ATXHeading1", "ATXHeading2", "ATXHeading3", "ATXHeading4", "ATXHeading5", "ATXHeading6"],
    prefix: "# ",
    prefixStates: ["# ", "## ", "### ", "#### ", "##### ", "###### ", ""]
  }),
  [m.Image]: w({
    nodes: ["Image"],
    prefix: "![](",
    suffix: ")"
  }),
  [m.Italic]: w({
    nodes: ["Emphasis"],
    prefix: "*",
    suffix: "*"
  }),
  [m.Link]: w({
    nodes: ["Link"],
    prefix: "[](",
    suffix: ")"
  }),
  [m.OrderedList]: w({
    line: !0,
    multiline: !0,
    nodes: ["OrderedList"],
    prefix: "1. "
  }),
  [m.Quote]: w({
    line: !0,
    multiline: !0,
    nodes: ["Blockquote"],
    prefix: "> "
  }),
  [m.TaskList]: w({
    line: !0,
    multiline: !0,
    nodes: ["BulletList"],
    prefix: "- [ ] "
  }),
  [m.List]: w({
    line: !0,
    multiline: !0,
    nodes: ["BulletList"],
    prefix: "- "
  })
}, we = ([e, n], t) => {
  const { editor: o } = e(), r = o.lineBlockAt(t.start), a = o.lineBlockAt(t.end);
  return { start: r.from, end: a.to };
}, Lt = ([e, n], t) => {
  const { editor: o } = e();
  let r = t.start;
  const a = [];
  for (; r <= t.end; ) {
    const l = o.lineBlockAt(r), i = Math.max(r, l.from), s = Math.min(r, l.to);
    a.push({ start: i, end: s }), r = l.to + 1;
  }
  return a;
}, $t = ([e, n], t) => {
  const { editor: o } = e(), r = o.state.wordAt(t.start)?.from || t.start, a = o.state.wordAt(t.end)?.to || t.end;
  return { start: r, end: a };
}, Mt = ([e, n], t) => t || P([e, n]).pop() || { start: 0, end: 0 }, Ce = ([e, n], t) => {
  const { editor: o } = e();
  return o.state.sliceDoc(t.start, t.end);
}, Y = ([e, n], t, o) => St(e(), o).find(({ type: a }) => t.nodes.includes(a.name)), St = ({ editor: { state: e } }, n) => {
  const t = [];
  return J(e).iterate({
    from: n.start,
    to: n.end,
    enter: ({ type: o, from: r, to: a }) => {
      t.push({ type: o, from: r, to: a });
    }
  }), t;
}, ee = ([e, n], t, o) => {
  const r = Ce([e, n], o), a = t.prefix.length, l = t.suffix.length * -1 || r.length, i = r.slice(a, l);
  T([e, n], i, o);
}, _t = ([e, n], t, o) => {
  const r = we([e, n], o), a = Y([e, n], t, r);
  if (a) {
    const l = a.from, i = a.to;
    ee([e, n], t, { start: l, end: i });
  } else {
    const l = t.prefix, i = t.suffix;
    U([e, n], { before: l, after: i, selection: r });
  }
}, At = ([e, n], t, o) => {
  Lt([e, n], o).forEach((a) => {
    Le([e, n], t, a);
  });
}, Le = ([e, n], t, o) => {
  const r = we([e, n], o), a = Y([e, n], t, r), l = t.prefixStates.length > 0;
  if (a && l)
    t.prefixStates.find((i, s) => {
      const c = a.from, u = a.to, k = Ce([e, n], { start: c, end: u }), L = k.startsWith(i);
      return L && T([e, n], k.replace(new RegExp(`^${i}`), t.prefixStates[s + 1]), { start: c, end: u }), L;
    });
  else if (a) {
    const i = a.from, s = a.to;
    ee([e, n], t, { start: i, end: s });
  } else {
    const i = t.prefix, s = t.suffix;
    U([e, n], { before: i, after: s, selection: r });
  }
}, Bt = ([e, n], t, o) => {
  const r = Y([e, n], t, o);
  if (r) {
    const a = r.from, l = r.to;
    ee([e, n], t, { start: a, end: l });
  } else {
    const { start: a, end: l } = $t([e, n], o), i = Array.isArray(t.prefix) ? t.prefix[0] : t.prefix, s = t.suffix;
    U([e, n], { before: i, after: s, selection: { start: a, end: l } });
  }
}, Nt = ([e, n], t, o) => {
  const r = Ct[t], a = Mt([e, n], o);
  r.block ? _t([e, n], r, a) : r.multiline ? At([e, n], r, a) : r.line ? Le([e, n], r, a) : Bt([e, n], r, a);
}, Dt = b.baseTheme({
  ".cm-line": {
    fontFamily: "var(--ink-internal-font-family)"
  },
  ".cm-line.cm-codeblock": {
    backgroundColor: "var(--ink-internal-block-background-color)",
    fontFamily: "var(--ink-internal-code-font-family)",
    padding: "0 var(--ink-internal-block-padding)"
  },
  ".cm-line.cm-codeblock.cm-codeblock-open": {
    borderRadius: "var(--ink-internal-border-radius) var(--ink-internal-border-radius) 0 0",
    paddingTop: "var(--ink-internal-block-padding)"
  },
  ".cm-line.cm-codeblock.cm-codeblock-close": {
    borderRadius: "0 0 var(--ink-internal-border-radius) var(--ink-internal-border-radius)",
    paddingBottom: "var(--ink-internal-block-padding)"
  },
  ".cm-line .cm-code": {
    backgroundColor: "var(--ink-internal-block-background-color)",
    fontFamily: "var(--ink-internal-code-font-family)",
    padding: "var(--ink-internal-inline-padding) 0"
  },
  ".cm-line .cm-code.cm-code-open": {
    borderRadius: "var(--ink-internal-border-radius) 0 0 var(--ink-internal-border-radius)",
    paddingLeft: "var(--ink-internal-inline-padding)"
  },
  ".cm-line .cm-code.cm-code-close": {
    borderRadius: "0 var(--ink-internal-border-radius) var(--ink-internal-border-radius) 0",
    paddingRight: "var(--ink-internal-inline-padding)"
  }
}), Et = [
  "CodeBlock",
  "FencedCode",
  "HTMLBlock",
  "CommentBlock"
], Tt = C.line({ attributes: { class: "cm-codeblock" } }), Ht = C.line({ attributes: { class: "cm-codeblock-open" } }), jt = C.line({ attributes: { class: "cm-codeblock-close" } }), zt = C.mark({ attributes: { class: "cm-code" } }), Vt = C.mark({ attributes: { class: "cm-code cm-code-open" } }), Ot = C.mark({ attributes: { class: "cm-code cm-code-close" } }), It = je.define((e) => ({
  update: () => Rt(e)
}), { decorations: (e) => e.update() }), Rt = (e) => {
  const n = new Fe(), t = J(e.state);
  for (const o of e.visibleRanges)
    for (let r = o.from; r < o.to; ) {
      const a = e.state.doc.lineAt(r);
      let l;
      t.iterate({
        enter({ type: i, from: s, to: c }) {
          if (i.name !== "Document")
            if (Et.includes(i.name)) {
              n.add(a.from, a.from, Tt);
              const u = e.state.doc.lineAt(s), k = e.state.doc.lineAt(c);
              return u.number === a.number && n.add(a.from, a.from, Ht), k.number === a.number && n.add(a.from, a.from, jt), !1;
            } else
              i.name === "InlineCode" ? l = { from: s, to: c, innerFrom: s, innerTo: c } : i.name === "CodeMark" && (s === l.from ? (l.innerFrom = c, n.add(s, c, Vt)) : c === l.to && (l.innerTo = s, n.add(l.innerFrom, l.innerTo, zt), n.add(s, c, Ot)));
        },
        from: a.from,
        to: a.to
      }), r = a.to + 1;
    }
  return n.finish();
}, Wt = () => [
  Dt,
  It
], Ft = [
  {
    key: "Tab",
    run: ({ state: e, dispatch: n }) => e.selection.ranges.some((t) => !t.empty) ? Ke({ state: e, dispatch: n }) : (n(e.update(e.replaceSelection("  "), {
      scrollIntoView: !0,
      annotations: Pe.userEvent.of("input")
    })), !0),
    shift: Ze
  }
], Pt = () => ze.of([
  ...Ft,
  ...Qe,
  ...Ge
]), Ut = () => b.lineWrapping, qt = () => {
  const e = b.baseTheme({
    "&": {},
    ".cm-scroller": {
      lineHeight: "var(--ink-internal-editor-line-height)",
      fontFamily: "var(--ink-internal-font-family)",
      fontSize: "var(--ink-internal-editor-font-size)"
    },
    ".cm-line": {
      padding: "0"
    }
  }), n = qe(Xe.define([
    {
      tag: d.atom,
      color: "var(--ink-internal-syntax-atom-color)"
    },
    {
      tag: d.meta,
      color: "var(--ink-internal-syntax-meta-color)"
    },
    {
      tag: d.emphasis,
      color: "var(--ink-internal-syntax-emphasis-color)",
      fontStyle: "var(--ink-internal-syntax-emphasis-font-style)"
    },
    {
      tag: d.strong,
      color: "var(--ink-internal-syntax-strong-color)",
      fontWeight: "var(--ink-internal-syntax-strong-font-weight)"
    },
    {
      tag: d.strikethrough,
      color: "var(--ink-internal-syntax-strikethrough-color)",
      textDecoration: "var(--ink-internal-syntax-strikethrough-text-decoration)"
    },
    {
      tag: d.comment,
      color: "var(--ink-internal-syntax-comment-color)",
      fontStyle: "var(--ink-internal-syntax-comment-font-style)"
    },
    {
      tag: d.monospace,
      color: "var(--ink-internal-syntax-code-color)",
      fontFamily: "var(--ink-internal-syntax-code-font-family)"
    },
    {
      tag: d.name,
      color: "var(--ink-internal-syntax-name-color)"
    },
    {
      tag: d.labelName,
      color: "var(--ink-internal-syntax-name-label-color)"
    },
    {
      tag: d.propertyName,
      color: "var(--ink-internal-syntax-name-property-color)"
    },
    {
      tag: d.definition(d.propertyName),
      color: "var(--ink-internal-syntax-name-property-definition-color)"
    },
    {
      tag: d.variableName,
      color: "var(--ink-internal-syntax-name-variable-color)"
    },
    {
      tag: d.definition(d.variableName),
      color: "var(--ink-internal-syntax-name-variable-definition-color)"
    },
    {
      tag: d.local(d.variableName),
      color: "var(--ink-internal-syntax-name-variable-local-color)"
    },
    {
      tag: d.special(d.variableName),
      color: "var(--ink-internal-syntax-name-variable-special-color)"
    },
    {
      tag: d.heading,
      color: "var(--ink-internal-syntax-heading-color)",
      fontWeight: "var(--ink-internal-syntax-heading-font-weight)"
    },
    {
      tag: d.heading1,
      color: "var(--ink-internal-syntax-heading1-color)",
      fontSize: "var(--ink-internal-syntax-heading1-font-size)",
      fontWeight: "var(--ink-internal-syntax-heading1-font-weight)"
    },
    {
      tag: d.heading2,
      color: "var(--ink-internal-syntax-heading2-color)",
      fontSize: "var(--ink-internal-syntax-heading2-font-size)",
      fontWeight: "var(--ink-internal-syntax-heading2-font-weight)"
    },
    {
      tag: d.heading3,
      color: "var(--ink-internal-syntax-heading3-color)",
      fontSize: "var(--ink-internal-syntax-heading3-font-size)",
      fontWeight: "var(--ink-internal-syntax-heading3-font-weight)"
    },
    {
      tag: d.heading4,
      color: "var(--ink-internal-syntax-heading4-color)",
      fontSize: "var(--ink-internal-syntax-heading4-font-size)",
      fontWeight: "var(--ink-internal-syntax-heading4-font-weight)"
    },
    {
      tag: d.heading5,
      color: "var(--ink-internal-syntax-heading5-color)",
      fontSize: "var(--ink-internal-syntax-heading5-font-size)",
      fontWeight: "var(--ink-internal-syntax-heading5-font-weight)"
    },
    {
      tag: d.heading6,
      color: "var(--ink-internal-syntax-heading6-color)",
      fontSize: "var(--ink-internal-syntax-heading6-font-size)",
      fontWeight: "var(--ink-internal-syntax-heading6-font-weight)"
    },
    {
      tag: d.keyword,
      color: "var(--ink-internal-syntax-keyword-color)"
    },
    {
      tag: d.number,
      color: "var(--ink-internal-syntax-number-color)"
    },
    {
      tag: d.operator,
      color: "var(--ink-internal-syntax-operator-color)"
    },
    {
      tag: d.punctuation,
      color: "var(--ink-internal-syntax-punctuation-color)"
    },
    {
      tag: d.link,
      color: "var(--ink-internal-syntax-link-color)"
    },
    {
      tag: d.url,
      color: "var(--ink-internal-syntax-url-color)"
    },
    {
      tag: d.string,
      color: "var(--ink-internal-syntax-string-color)"
    },
    {
      tag: d.special(d.string),
      color: "var(--ink-internal-syntax-string-special-color)"
    },
    {
      tag: d.processingInstruction,
      color: "var(--ink-internal-syntax-processing-instruction-color)"
    }
  ]));
  return [
    e,
    n
  ];
}, Xt = (e) => {
  if (e.length > 0)
    return ye(e);
}, $e = (e) => {
  const n = e.options.plugins.flatMap((r) => r.type === R.Completion ? r.value : []), t = e.options.plugins.flatMap((r) => r.type === R.Default ? r.value : []), o = e.options.plugins.flatMap((r) => r.type === R.Grammar ? r.value : []);
  return Q.create({
    doc: e.options.doc,
    selection: Xt(e.options.selections),
    extensions: [
      ...ht(e),
      Oe({
        defaultKeymap: !0,
        icons: !1,
        override: n,
        optionClass: () => "ink-tooltip-option"
      }),
      Wt(),
      Je(),
      Pt(),
      Ut(),
      Ye({
        base: et,
        codeLanguages: tt,
        extensions: o
      }),
      qt(),
      ...t
    ]
  });
}, Qt = ([e, n]) => {
  const { editor: t } = e();
  t.destroy();
}, Gt = ([e, n]) => {
  const { editor: t } = e();
  return t.state.sliceDoc();
}, K = ([e, n]) => {
  const { editor: t } = e();
  t.hasFocus || t.focus();
}, Kt = ([e, n], t, o) => Nt([e, n], t, o), T = ([e, n], t, o, r = !1) => {
  const { editor: a } = e();
  let l = o?.start, i = o?.end || o?.start;
  if (typeof l > "u") {
    const c = P([e, n]).pop();
    l = c.start, i = c.end;
  }
  const s = { changes: { from: l, to: i, insert: t } };
  if (r) {
    const c = l === i ? l + t.length : l, u = l + t.length;
    Object.assign(s, { selection: { anchor: c, head: u } });
  }
  a.dispatch(a.state.update(s));
}, Zt = ([e, n], t) => {
  n(V(e(), { options: { doc: t } })), e().editor.setState($e(e()));
}, Jt = (e) => ({
  destroy: Qt.bind(void 0, e),
  doc: Gt.bind(void 0, e),
  focus: K.bind(void 0, e),
  insert: T.bind(void 0, e),
  load: Zt.bind(void 0, e),
  reconfigure: Yt.bind(void 0, e),
  select: Me.bind(void 0, e),
  selections: P.bind(void 0, e),
  update: en.bind(void 0, e),
  wrap: U.bind(void 0, e)
}), Yt = ([e, n], t) => {
  const o = be(n(V(e(), { options: t })));
  e().editor.dispatch({
    effects: o
  });
}, Me = ([e, n], t) => {
  const { editor: o } = e();
  o.dispatch(o.state.update({
    selection: ye(t)
  }));
}, P = ([e, n]) => {
  const { editor: t } = e();
  return wt(t.state.selection);
}, en = ([e, n], t) => {
  const { editor: o } = e();
  o.dispatch(o.state.update({
    changes: {
      from: 0,
      to: o.state.doc.length,
      insert: t
    }
  }));
}, U = ([e, n], { after: t, before: o, selection: r }) => {
  const { editor: a } = e(), l = r || P([e, n]).pop() || { start: 0, end: 0 }, i = a.state.sliceDoc(l.start, l.end);
  T([e, n], `${o}${i}${t}`, l), Me([e, n], [{ start: l.start + o.length, end: l.end + o.length }]);
}, tn = `.ink-drop-zone{align-items:center;background-color:#00000080;color:var(--ink-internal-color);display:flex;inset:0;justify-content:center;position:var(--ink-internal-modal-position);z-index:100}.ink-drop-zone:not(.visible){display:none}.ink-drop-zone-modal{background-color:var(--ink-internal-block-background-color);border-radius:var(--ink-internal-border-radius);box-sizing:border-box;height:100%;max-height:20rem;max-width:40rem;padding:1rem;position:relative;width:100%}.ink-drop-zone-hide{cursor:pointer;height:1.75rem;position:absolute;right:.25rem;top:.25rem;width:1.75rem}.ink-drop-zone-hide svg{background-color:var(--ink-internal-block-background-color)}.ink-drop-zone-droppable-area{align-items:center;border:.2rem dashed var(--ink-internal-color);border-radius:.125rem;box-sizing:border-box;display:flex;flex-direction:column;font-size:1.25em;gap:1rem;height:100%;justify-content:center;padding:1rem;text-align:center}.ink-drop-zone-file-preview{align-items:center;display:flex;flex-wrap:wrap;gap:.5rem;max-width:25.5rem}.ink-drop-zone-file-preview-image{border:.125rem solid #222;border-radius:.125rem;box-sizing:border-box;height:6rem;object-fit:cover;padding:.5rem;width:6rem}
`, nn = /* @__PURE__ */ h("<style></style>"), on = /* @__PURE__ */ h("<span>uploading files...</span>"), rn = /* @__PURE__ */ h('<div class="ink-drop-zone"><div class="ink-drop-zone-modal"><div class="ink-drop-zone-droppable-area"><div class="ink-drop-zone-file-preview"></div></div><div class="ink-drop-zone-hide"><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 14l2-2m0 0l2-2m-2 2l-2-2m2 2l2 2m7-2a9 9 0 11-18 0 9 9 0 0118 0z"></path></svg></div></div></div>'), an = /* @__PURE__ */ h('<img class="ink-drop-zone-file-preview-image">'), ln = /* @__PURE__ */ h("<span>drop files here</span>"), sn = () => {
  const [e, n] = D(0), [t, o] = D([]), [r, a] = D(!1), [l, i] = D(!1), [s, c] = O(), u = () => {
    i(!1);
  }, k = (g) => {
    if (s().options.files.dragAndDrop) {
      g.preventDefault(), g.stopPropagation();
      const v = g.dataTransfer;
      v?.files ? oe(v.files) : (n(0), i(!1), o([]));
    }
  }, L = (g) => {
    s().options.files.dragAndDrop && (g.preventDefault(), n(e() + 1), i(!0));
  }, H = (g) => {
    s().options.files.dragAndDrop && (g.preventDefault(), n(e() - 1), e() === 0 && i(!1));
  }, I = (g) => {
    s().options.files.dragAndDrop && (g.preventDefault(), i(!0));
  }, te = (g) => {
    s().options.files.dragAndDrop && (g.preventDefault(), n(0), i(!1));
  }, ne = (g) => {
    if (s().options.files.clipboard) {
      g.preventDefault();
      const v = g.clipboardData;
      v?.files && v.files.length > 0 && oe(v.files);
    }
  }, oe = (g) => {
    Array.from(g).forEach((v) => {
      o([...t(), v]);
    }), a(!0), i(!0), Promise.resolve(s().options.files.handler(g)).then((v) => {
      if (s().options.files.injectMarkup && v) {
        const A = `![](${v})`;
        T([s, c], A);
      }
    }).finally(() => {
      n(0), a(!1), i(!1), o([]);
    });
  };
  return me(() => {
    document.addEventListener("dragenter", L), document.addEventListener("dragleave", H), document.addEventListener("dragover", I), document.addEventListener("drop", te), s().root.addEventListener("paste", ne);
  }), Ne(() => {
    document.removeEventListener("dragenter", L), document.removeEventListener("dragleave", H), document.removeEventListener("dragover", I), document.removeEventListener("drop", te), s().root.removeEventListener("paste", ne);
  }), [(() => {
    const g = nn.cloneNode(!0);
    return p(g, tn), g;
  })(), (() => {
    const g = rn.cloneNode(!0), v = g.firstChild, A = v.firstChild, _e = A.firstChild, Ae = A.nextSibling;
    return A.addEventListener("drop", k), p(_e, f(De, {
      get each() {
        return t().slice(0, 8);
      },
      children: (re) => (() => {
        const q = an.cloneNode(!0);
        return z((j) => {
          const ie = re.name, ae = URL.createObjectURL(re);
          return ie !== j._v$ && se(q, "alt", j._v$ = ie), ae !== j._v$2 && se(q, "src", j._v$2 = ae), j;
        }, {
          _v$: void 0,
          _v$2: void 0
        }), q;
      })()
    })), p(A, f(x, {
      get when() {
        return r();
      },
      get fallback() {
        return ln.cloneNode(!0);
      },
      get children() {
        return on.cloneNode(!0);
      }
    }), null), Ae.$$click = u, z(() => g.classList.toggle("visible", !!l())), g;
  })()];
};
ke(["click"]);
const cn = (e) => {
  const n = new b({
    dispatch: (t) => {
      const { options: o } = e;
      o.hooks.beforeUpdate(t.newDoc.toString()), n.update([t]), t.docChanged && o.hooks.afterUpdate(t.newDoc.toString());
    },
    state: $e(e)
  });
  return n;
}, dn = () => {
  const [e, n] = O(), t = cn(e());
  return n(V(e(), {
    editor: t
  })), t.dom;
}, fn = /* @__PURE__ */ h('<button class="ink-button"></button>'), y = (e) => (() => {
  const n = fn.cloneNode(!0);
  return n.$$click = (t) => e.onclick(t), p(n, () => e.children), n;
})();
ke(["click"]);
const un = `.ink .ink-toolbar{background-color:var(--ink-internal-block-background-color);border-radius:var(--ink-internal-border-radius);bottom:.25rem;color:inherit;display:flex;gap:2rem;overflow:auto;padding:.25rem;position:sticky;top:.25rem;z-index:10}.ink .ink-toolbar-group{display:flex}.ink .ink-toolbar .ink-button{align-items:center;background:none;border:none;border-radius:var(--ink-internal-border-radius);color:inherit;cursor:pointer;display:flex;height:2.25rem;justify-content:center;padding:.4rem;width:2.25rem}.ink .ink-toolbar .ink-button:hover{background-color:var(--ink-internal-block-background-color-on-hover)}.ink .ink-toolbar .ink-button>*{align-items:center;display:flex;height:100%}
`, gn = /* @__PURE__ */ h('<svg viewBox="0 0 20 20" fill="none" stroke="currentColor" stroke-miterlimit="5" stroke-linecap="round" stroke-linejoin="round"><path d="M6 4V10M6 16V10M6 10H14M14 10V4M14 10V16"></path></svg>'), pn = /* @__PURE__ */ h('<svg viewBox="0 0 20 20" fill="none" stroke="currentColor" stroke-width="1.5" stroke-miterlimit="5" stroke-linecap="round" stroke-linejoin="round"><path d="M6.5 10H10.5C12.1569 10 13.5 11.3431 13.5 13C13.5 14.6569 12.1569 16 10.5 16H6.5V4H9.5C11.1569 4 12.5 5.34315 12.5 7C12.5 8.65686 11.1569 10 9.5 10"></path></svg>'), mn = /* @__PURE__ */ h('<svg viewBox="0 0 20 20" fill="none" stroke="currentColor" stroke-miterlimit="5" stroke-linecap="round" stroke-linejoin="round"><path d="M11 4L9 16M13 4H9M7 16H11"></path></svg>'), hn = /* @__PURE__ */ h('<svg viewBox="0 0 20 20" fill="none" stroke="currentColor" stroke-miterlimit="5" stroke-linecap="round" stroke-linejoin="round"><path d="M2.00257 16H17.9955M2.00055 4H18M7 10H18.0659M2 8.5V11.4999C2.4 11.5 2.5 11.5 2.5 11.5V11V10.5M4 8.5V11.4999H4.5V11V10.5"></path></svg>'), kn = /* @__PURE__ */ h('<svg viewBox="0 0 20 20" fill="none" stroke="currentColor" stroke-miterlimit="5" stroke-linecap="round" stroke-linejoin="round"><path d="M13 4L7 16"></path><path d="M5 7L2 10L5 13"></path><path d="M15 7L18 10L15 13"></path></svg>'), xn = /* @__PURE__ */ h('<svg viewBox="0 0 20 20" fill="none" stroke="currentColor" stroke-miterlimit="5" stroke-linecap="round" stroke-linejoin="round"><path d="M7 4L8 6"></path></svg>'), bn = /* @__PURE__ */ h('<svg viewBox="0 0 20 20" fill="none" stroke="currentColor" stroke-miterlimit="5" stroke-linecap="round" stroke-linejoin="round"><path d="M7 16H17.8294"></path><path d="M2 16H4"></path><path d="M7 10H17.8294"></path><path d="M2 10H4"></path><path d="M7 4H17.8294"></path><path d="M2 4H4"></path></svg>'), vn = /* @__PURE__ */ h('<svg viewBox="0 0 20 20" fill="none" stroke="currentColor" stroke-miterlimit="5" stroke-linecap="round" stroke-linejoin="round"><path d="M7 16H18"></path><path d="M2 17.0242C2.48314 17.7569 3.94052 17.6154 3.99486 16.7919C4.05315 15.9169 3.1975 16.0044 2.99496 16.0044M2.0023 14.9758C2.48544 14.2431 3.94282 14.3846 3.99716 15.2081C4.05545 16.0831 3.1998 16.0002 2.99726 16.0002"></path><path d="M7 10H18"></path><path d="M2.00501 11.5H4M2.00193 8.97562C2.48449 8.24319 3.9401 8.38467 3.99437 9.20777C4.05259 10.0825 2.04342 10.5788 2 11.4996"></path><path d="M7 4H18"></path><path d="M2 5.5H4M2.99713 5.49952V2.5L2.215 2.93501"></path></svg>'), yn = /* @__PURE__ */ h('<svg viewBox="0 0 20 20" fill="none" stroke="currentColor" stroke-miterlimit="5" stroke-linecap="round" stroke-linejoin="round"><path d="M7 16H17.8294"></path><path d="M5 15L3 17L2 16"></path><path d="M7 10H17.8294"></path><path d="M5 9L3 11L2 10"></path><path d="M7 4H17.8294"></path><path d="M5 3L3 5L2 4"></path></svg>'), wn = /* @__PURE__ */ h('<svg viewBox="0 0 20 20" fill="none" stroke="currentColor" stroke-miterlimit="5" stroke-linecap="round" stroke-linejoin="round"><path d="M9.12127 10.881C10.02 11.78 11.5237 11.7349 12.4771 10.7813L15.2546 8.00302C16.2079 7.04937 16.253 5.54521 15.3542 4.6462C14.4555 3.74719 12.9512 3.79174 11.9979 4.74539L10.3437 6.40007M10.8787 9.11903C9.97997 8.22002 8.47626 8.26509 7.52288 9.21874L4.74545 11.997C3.79208 12.9506 3.74701 14.4548 4.64577 15.3538C5.54452 16.2528 7.04876 16.2083 8.00213 15.2546L9.65633 13.5999"></path></svg>'), Cn = /* @__PURE__ */ h('<svg viewBox="0 0 20 20" fill="none" stroke="currentColor" stroke-miterlimit="5" stroke-linecap="round" stroke-linejoin="round"><rect x="2" y="4" width="16" height="12" rx="1"></rect><path d="M7.42659 7.67597L13.7751 13.8831M2.00208 12.9778L7.42844 7.67175"></path><path d="M11.9119 12.0599L14.484 9.54443L17.9973 12.9785"></path><path d="M10.9989 7.95832C11.551 7.95832 11.9986 7.52072 11.9986 6.98092C11.9986 6.44113 11.551 6.00354 10.9989 6.00354C10.4468 6.00354 9.99921 6.44113 9.99921 6.98092C9.99921 7.52072 10.4468 7.95832 10.9989 7.95832Z"></path></svg>'), Ln = /* @__PURE__ */ h('<svg viewBox="0 0 20 20" fill="none" stroke="currentColor" stroke-miterlimit="5" stroke-linecap="round" stroke-linejoin="round"><path d="M10 13V4M10 4L13 7M10 4L7 7"></path><path d="M2 13V15C2 15.5523 2.44772 16 3 16H17C17.5523 16 18 15.5523 18 15V13"></path></svg>'), $n = /* @__PURE__ */ h('<div class="ink-toolbar"><style></style><div class="ink-toolbar-group"></div><div class="ink-toolbar-group"></div><div class="ink-toolbar-group"></div><div class="ink-toolbar-group"></div></div>'), Mn = () => {
  const [e, n] = O(), t = (a) => {
    Kt([e, n], a), K([e, n]);
  }, o = document.createElement("input"), r = () => {
    o.click();
  };
  return o.style.display = "none", o.type = "file", o.onchange = (a) => {
    const l = a.target;
    l?.files && Promise.resolve(e().options.files.handler(l.files)).then((i) => {
      const s = `![](${i})`;
      T([e, n], s), K([e, n]);
    });
  }, (() => {
    const a = $n.cloneNode(!0), l = a.firstChild, i = l.nextSibling, s = i.nextSibling, c = s.nextSibling, u = c.nextSibling;
    return p(l, un), p(i, f(x, {
      get when() {
        return e().options.toolbar.heading;
      },
      get children() {
        return f(y, {
          onclick: () => t(m.Heading),
          get children() {
            return gn.cloneNode(!0);
          }
        });
      }
    }), null), p(i, f(x, {
      get when() {
        return e().options.toolbar.bold;
      },
      get children() {
        return f(y, {
          onclick: () => t(m.Bold),
          get children() {
            return pn.cloneNode(!0);
          }
        });
      }
    }), null), p(i, f(x, {
      get when() {
        return e().options.toolbar.italic;
      },
      get children() {
        return f(y, {
          onclick: () => t(m.Italic),
          get children() {
            return mn.cloneNode(!0);
          }
        });
      }
    }), null), p(s, f(x, {
      get when() {
        return e().options.toolbar.quote;
      },
      get children() {
        return f(y, {
          onclick: () => t(m.Quote),
          get children() {
            return hn.cloneNode(!0);
          }
        });
      }
    }), null), p(s, f(x, {
      get when() {
        return e().options.toolbar.codeBlock;
      },
      get children() {
        return f(y, {
          onclick: () => t(m.CodeBlock),
          get children() {
            return kn.cloneNode(!0);
          }
        });
      }
    }), null), p(s, f(x, {
      get when() {
        return e().options.toolbar.code;
      },
      get children() {
        return f(y, {
          onclick: () => t(m.Code),
          get children() {
            return xn.cloneNode(!0);
          }
        });
      }
    }), null), p(c, f(x, {
      get when() {
        return e().options.toolbar.list;
      },
      get children() {
        return f(y, {
          onclick: () => t(m.List),
          get children() {
            return bn.cloneNode(!0);
          }
        });
      }
    }), null), p(c, f(x, {
      get when() {
        return e().options.toolbar.orderedList;
      },
      get children() {
        return f(y, {
          onclick: () => t(m.OrderedList),
          get children() {
            return vn.cloneNode(!0);
          }
        });
      }
    }), null), p(c, f(x, {
      get when() {
        return e().options.toolbar.taskList;
      },
      get children() {
        return f(y, {
          onclick: () => t(m.TaskList),
          get children() {
            return yn.cloneNode(!0);
          }
        });
      }
    }), null), p(u, f(x, {
      get when() {
        return e().options.toolbar.link;
      },
      get children() {
        return f(y, {
          onclick: () => t(m.Link),
          get children() {
            return wn.cloneNode(!0);
          }
        });
      }
    }), null), p(u, f(x, {
      get when() {
        return e().options.toolbar.image;
      },
      get children() {
        return f(y, {
          onclick: () => t(m.Image),
          get children() {
            return Cn.cloneNode(!0);
          }
        });
      }
    }), null), p(u, f(x, {
      get when() {
        return e().options.toolbar.upload;
      },
      get children() {
        return f(y, {
          onclick: r,
          get children() {
            return [Ln.cloneNode(!0), o];
          }
        });
      }
    }), null), a;
  })();
}, Sn = `.ink{color:var(--ink-internal-color, inherit);display:flex;flex-direction:var(--ink-internal-flex-direction, column);gap:1rem;padding:var(--ink-internal-editor-padding, 0)}.ink .cm-tooltip{background-color:var(--ink-internal-block-background-color);border-radius:var(--ink-internal-border-radius);font-family:inherit;padding:.25rem}.ink .cm-tooltip.cm-tooltip-autocomplete ul{font-family:inherit}.ink .cm-tooltip.cm-tooltip-autocomplete ul li.ink-tooltip-option{border-radius:var(--ink-internal-border-radius);padding:.25rem}.ink .cm-tooltip.cm-tooltip-autocomplete ul li.ink-tooltip-option[aria-selected]{background-color:#96969640}.ink .cm-completionLabel{font-family:inherit}
`, _n = /* @__PURE__ */ h("<style></style>"), An = () => {
  const [e] = O(), [n, t] = D(X(e()));
  return Ee(() => {
    t(X(e()));
  }), me(() => {
    const o = window.matchMedia("(prefers-color-scheme: dark)"), r = (a) => {
      const {
        editor: l,
        root: i
      } = e();
      if (i.isConnected) {
        const s = be(e());
        l.dispatch({
          effects: s
        }), t(X(e()));
      } else
        o.removeEventListener("change", r);
    };
    o.addEventListener("change", r);
  }), (() => {
    const o = _n.cloneNode(!0);
    return p(o, () => `.ink {
  ${n().join(`
  `)}
}`, null), p(o, Sn, null), o;
  })();
}, Bn = /* @__PURE__ */ h('<div class="ink"></div>'), Nn = () => {
  const [e, n] = O(), t = (o) => {
    n(V(e(), {
      root: o
    }));
  };
  return (() => {
    const o = Bn.cloneNode(!0);
    return t(o), p(o, f(An, {}), null), p(o, f(sn, {}), null), p(o, f(x, {
      get when() {
        return e().options.interface.toolbar;
      },
      get children() {
        return f(Mn, {});
      }
    }), null), p(o, f(dn, {}), null), o;
  })();
}, pe = ve(), Se = Te([() => pe, (e) => typeof e == "function" ? e(pe) : e]), Dn = (e) => f(Se.Provider, {
  get value() {
    return e.store;
  },
  get children() {
    return e.children;
  }
}), O = () => He(Se), En = (e) => f(Dn, {
  get store() {
    return e.store;
  },
  get children() {
    return f(Nn, {
      get store() {
        return e.store;
      }
    });
  }
}), Pn = ({ theme: e, decorator: n }) => {
  const t = b.baseTheme(e), o = (l) => C.widget({
    widget: l,
    side: -1,
    block: !0
  }), r = (l) => {
    const s = n(l).map((c) => o(c.widget).range(c.from, c.to));
    return s.length > 0 ? W.of(s) : C.none;
  }, a = Z.define({
    create(l) {
      return r(l);
    },
    update(l, i) {
      return i.docChanged ? r(i.state) : l.map(i.changes);
    },
    provide(l) {
      return b.decorations.from(l);
    }
  });
  return [
    t,
    a
  ];
}, Un = (e) => e, qn = (e, n = {}) => {
  const t = yt(n);
  return ot(() => f(En, {
    store: t
  }), e), Jt(t);
};
export {
  E as Appearance,
  $ as Extensions,
  m as Markup,
  R as PluginType,
  qn as default,
  Un as defineOptions,
  Pn as extension,
  qn as ink
};
